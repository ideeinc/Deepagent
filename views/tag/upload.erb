<!DOCTYPE html>
<%#include "services/taggroup.h" %>
<% tfetch(QList<TagGroup>, allGroups) %>
<%#include "containers/uploadresultcontainer.h" %>
<% tfetch(UploadResultContainer, uploadResult) %>
<html>
<head>
  <meta http-equiv="content-type" content="text/html; charset=UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title><%= controller()->name() + ": " + controller()->activeAction() %></title>
  <script src="/js/jquery-1.11.3.min.js" type="text/javascript"></script>
  <script type="text/javascript">
  $(window).load(function(){
    var tagMap = {
<% for (const auto& group : allGroups) { %>
      "<%= group.name() %>": [
    <% for (const auto& tag : group.tags()) { %>
        { "name": "<%= tag.name() %>", "displayName": "<%= tag.displayName() %>" },
    <% } %>
      ],
<% } %>
    };
    $('select[name=group]').on('change', function(e) {
      var tagPicker = $('select[name=tag]');
      tagPicker.find('option').remove();

      var groupName = $(this).find('option:selected').val();
      if (tagMap.hasOwnProperty(groupName)) {
        $.each(tagMap[groupName], function(i, v) {
          tagPicker.append('<option value="' + v.name + '">' + v.displayName + '</option>');
        });
        tagPicker.append('<option value="">&lt;&lt; 新規作成 &gt;&gt;</option>');
        $('input:text[name=newTagName]').closest('span').hide();
      }
    });
    $('select[name=tag]').on('change', function(e) {
      if ($(this).find('option:selected').val().length < 1) {
        $('input:text[name=newTagName]').closest('span').show();
      } else {
        $('input:text[name=newTagName]').closest('span').hide();
      }
    });
    $('select[name=group]').val("フォルダ").change();

    $('input:submit[name=upload]').on('click', function(e){
      $('p.message').text("");
      if ($('input:file[name^=files]').val().length < 1) {
        e.preventDefault();
        window.alert('アップロードするファイルを選択してください');
        return false;
      }
      var tagName = $('select[name=tag] option:selected').val();
      if (tagName.length < 1) {
        tagName = $('input:text[name=newTagName]').val();
        if (tagName.length < 1) {
          e.preventDefault();
          window.alert('タグを新規作成する場合は、タグID は必須です');
          return false;
        }
        if (! tagName.match(/^[a-z0-9_\-]+$/)) {
            window.alert('タタグIDには半角英数小文字のみ使えます');
            return false;
        }
        var groupName = $('select[name=group] option:selected').val();
        var isUsedName = false;
        if (tagMap.hasOwnProperty(groupName)) {
          $.each(tagMap[groupName], function(i, v) {
            if (v.name == tagName) {
              isUsedName = true;
              return false;
            }
          });
        }
        if (isUsedName) {
          e.preventDefault();
          window.alert('タグID "' + tagName + '" は "' + groupName + '" グループですでに使われています');
          return false;
        }
      }
    });
  });
  </script>
</head>
<body>

<h2>画像ファイルのアップロード</h2>

<%== formTag(urla("upload"), Tf::Post, true) %>
<%== inputHiddenTag("page", urla("index")) %>
<fieldset>
<legend>画像とタグの選択</legend>
<p><label>ファイル: <%== inputFileTag("files[]", THtmlAttribute("multiple", "multiple") | THtmlAttribute("accept", ".zip,.tar,.gz,image/jpeg")) %></label> <span>（JPEG ファイルまたは zip, tar, tar.gz アーカイブファイル）</span></p>
<p><label>画像の黒フチ切り取りをスキップ: <%== checkBoxTag("cropImage", "0", false) %></label></p>
<label>グループ:
<select name="group">
  <% for (const auto& group : allGroups) { %>
    <%== optionTag(group.name(), group.name()) %>
  <% } %>
</select>
</label>
<label>タグ:
<select name="tag">
</select>
</label>
<span style="display: none;">
<label> 表示名: <%== inputTextTag("newTagDisplayName", "", THtmlAttribute("placeholder", "（任意）")) %></label>
<label> タグID: <%== inputTextTag("newTagName", "", THtmlAttribute("placeholder", "（必須：半角英数小文字）")) %></label>
</span>
<p><%== submitTag("アップロード", THtmlAttribute("name", "upload")) %></p>
</fieldset>
<%== endTag() %>

<% if (! uploadResult.errors.isEmpty()) { %>
    <% const QMap<QString, QString> errorDescriptions({
        {"duplicated", "以下のファイルはすでにサーバー上に存在するためスキップしました"}, 
        {"cropImage", "以下のファイルは画像処理に失敗しました"},
        {"unknown", "以下のファイルは何らかのエラーが起きたためアップロードできませんでした"}
    }); %>
    <% for (const auto& k : uploadResult.errors.keys()) {
        const QString description = errorDescriptions[k];
        echo("<p class=\"message\" style=\"color: red;\">" + description + "</p>");
        
        const QStringList files = uploadResult.errors[k];
        for (const QString& file : files) {
            echo("<span style=\"font-size: small;\">" + file + "</span><br />");
        }
    } %>
<% } %>
<% if (uploadResult.completed) { %>
<p class="message">アップロード完了</p>
<% } %>

<p><%== linkTo("<< 戻る", uploadResult.backPageURL.isEmpty() ? urla("index") : uploadResult.backPageURL) %></p>

</body>
</html>